// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Simbice.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Simbice_h__
#define __Simbice_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/Identity.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Simbice
{

class ClientCallback;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Simbice::ClientCallback>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Simbice::ClientCallback*);

class SimbiconServer;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Simbice::SimbiconServer>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Simbice::SimbiconServer*);

}

}

namespace Simbice
{

class ClientCallback;
bool operator==(const ClientCallback&, const ClientCallback&);
bool operator<(const ClientCallback&, const ClientCallback&);
::Ice::Object* upCast(::Simbice::ClientCallback*);
typedef ::IceInternal::Handle< ::Simbice::ClientCallback> ClientCallbackPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Simbice::ClientCallback> ClientCallbackPrx;
void __patch(ClientCallbackPtr&, const ::Ice::ObjectPtr&);

class SimbiconServer;
bool operator==(const SimbiconServer&, const SimbiconServer&);
bool operator<(const SimbiconServer&, const SimbiconServer&);
::Ice::Object* upCast(::Simbice::SimbiconServer*);
typedef ::IceInternal::Handle< ::Simbice::SimbiconServer> SimbiconServerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Simbice::SimbiconServer> SimbiconServerPrx;
void __patch(SimbiconServerPtr&, const ::Ice::ObjectPtr&);

}

namespace Simbice
{

struct ThreeTuple
{
    ::Ice::Double x;
    ::Ice::Double y;
    ::Ice::Double z;
};

struct Quaternion
{
    ::Ice::Double s;
    ::Simbice::ThreeTuple v;
};

struct RBState
{
    ::Ice::Int id;
    ::Simbice::ThreeTuple position;
    ::Simbice::Quaternion orientation;
    ::Simbice::ThreeTuple velocity;
    ::Simbice::ThreeTuple angularVelocity;
};

struct JointState
{
    ::Ice::Int id;
    ::Simbice::ThreeTuple torque;
};

struct ContactPoint
{
    ::Simbice::ThreeTuple cp;
    ::Simbice::ThreeTuple n;
    ::Ice::Double d;
    ::Ice::Int rb1;
    ::Ice::Int rb2;
    ::Simbice::ThreeTuple f;
};

typedef ::std::vector< ::Simbice::RBState> BodyStatesList;

typedef ::std::vector< ::Simbice::JointState> JointStatesList;

typedef ::std::vector< ::Simbice::ContactPoint> ContactPointsList;

struct AllState
{
    ::Simbice::BodyStatesList bodyStates;
    ::Simbice::JointStatesList jointStates;
    ::Simbice::ContactPointsList contactPoints;
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::Simbice::ThreeTuple>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 24;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::Simbice::ThreeTuple, S>
{
    static void write(S* __os, const ::Simbice::ThreeTuple& v)
    {
        __os->write(v.x);
        __os->write(v.y);
        __os->write(v.z);
    }
};

template<class S>
struct StreamReader< ::Simbice::ThreeTuple, S>
{
    static void read(S* __is, ::Simbice::ThreeTuple& v)
    {
        __is->read(v.x);
        __is->read(v.y);
        __is->read(v.z);
    }
};

template<>
struct StreamableTraits< ::Simbice::Quaternion>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 32;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::Simbice::Quaternion, S>
{
    static void write(S* __os, const ::Simbice::Quaternion& v)
    {
        __os->write(v.s);
        __os->write(v.v);
    }
};

template<class S>
struct StreamReader< ::Simbice::Quaternion, S>
{
    static void read(S* __is, ::Simbice::Quaternion& v)
    {
        __is->read(v.s);
        __is->read(v.v);
    }
};

template<>
struct StreamableTraits< ::Simbice::RBState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 108;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::Simbice::RBState, S>
{
    static void write(S* __os, const ::Simbice::RBState& v)
    {
        __os->write(v.id);
        __os->write(v.position);
        __os->write(v.orientation);
        __os->write(v.velocity);
        __os->write(v.angularVelocity);
    }
};

template<class S>
struct StreamReader< ::Simbice::RBState, S>
{
    static void read(S* __is, ::Simbice::RBState& v)
    {
        __is->read(v.id);
        __is->read(v.position);
        __is->read(v.orientation);
        __is->read(v.velocity);
        __is->read(v.angularVelocity);
    }
};

template<>
struct StreamableTraits< ::Simbice::JointState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 28;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::Simbice::JointState, S>
{
    static void write(S* __os, const ::Simbice::JointState& v)
    {
        __os->write(v.id);
        __os->write(v.torque);
    }
};

template<class S>
struct StreamReader< ::Simbice::JointState, S>
{
    static void read(S* __is, ::Simbice::JointState& v)
    {
        __is->read(v.id);
        __is->read(v.torque);
    }
};

template<>
struct StreamableTraits< ::Simbice::ContactPoint>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 88;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::Simbice::ContactPoint, S>
{
    static void write(S* __os, const ::Simbice::ContactPoint& v)
    {
        __os->write(v.cp);
        __os->write(v.n);
        __os->write(v.d);
        __os->write(v.rb1);
        __os->write(v.rb2);
        __os->write(v.f);
    }
};

template<class S>
struct StreamReader< ::Simbice::ContactPoint, S>
{
    static void read(S* __is, ::Simbice::ContactPoint& v)
    {
        __is->read(v.cp);
        __is->read(v.n);
        __is->read(v.d);
        __is->read(v.rb1);
        __is->read(v.rb2);
        __is->read(v.f);
    }
};

template<>
struct StreamableTraits< ::Simbice::AllState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Simbice::AllState, S>
{
    static void write(S* __os, const ::Simbice::AllState& v)
    {
        __os->write(v.bodyStates);
        __os->write(v.jointStates);
        __os->write(v.contactPoints);
    }
};

template<class S>
struct StreamReader< ::Simbice::AllState, S>
{
    static void read(S* __is, ::Simbice::AllState& v)
    {
        __is->read(v.bodyStates);
        __is->read(v.jointStates);
        __is->read(v.contactPoints);
    }
};

}

namespace Simbice
{

class Callback_ClientCallback_acceptNewState_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ClientCallback_acceptNewState_Base> Callback_ClientCallback_acceptNewStatePtr;

class Callback_SimbiconServer_addClient_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SimbiconServer_addClient_Base> Callback_SimbiconServer_addClientPtr;

class Callback_SimbiconServer_acceptClientState_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SimbiconServer_acceptClientState_Base> Callback_SimbiconServer_acceptClientStatePtr;

}

namespace IceProxy
{

namespace Simbice
{

class ClientCallback : virtual public ::IceProxy::Ice::Object
{
public:

    void acceptNewState(const ::Simbice::AllState& newState)
    {
        acceptNewState(newState, 0);
    }
    void acceptNewState(const ::Simbice::AllState& newState, const ::Ice::Context& __ctx)
    {
        acceptNewState(newState, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_acceptNewState(const ::Simbice::AllState& newState, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_acceptNewState(newState, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_acceptNewState(const ::Simbice::AllState& newState, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_acceptNewState(newState, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_acceptNewState(const ::Simbice::AllState& newState, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_acceptNewState(newState, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_acceptNewState(const ::Simbice::AllState& newState, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_acceptNewState(newState, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_acceptNewState(const ::Simbice::AllState& newState)
    {
        return begin_acceptNewState(newState, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_acceptNewState(const ::Simbice::AllState& newState, const ::Ice::Context& __ctx)
    {
        return begin_acceptNewState(newState, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_acceptNewState(const ::Simbice::AllState& newState, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_acceptNewState(newState, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_acceptNewState(const ::Simbice::AllState& newState, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_acceptNewState(newState, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_acceptNewState(const ::Simbice::AllState& newState, const ::Simbice::Callback_ClientCallback_acceptNewStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_acceptNewState(newState, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_acceptNewState(const ::Simbice::AllState& newState, const ::Ice::Context& __ctx, const ::Simbice::Callback_ClientCallback_acceptNewStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_acceptNewState(newState, &__ctx, __del, __cookie);
    }

    void end_acceptNewState(const ::Ice::AsyncResultPtr&);
    
private:

    void acceptNewState(const ::Simbice::AllState&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_acceptNewState(const ::Simbice::AllState&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_secure(bool __secure) const
    {
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_twoway() const
    {
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_oneway() const
    {
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_batchOneway() const
    {
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_datagram() const
    {
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_batchDatagram() const
    {
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_compress(bool __compress) const
    {
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class SimbiconServer : virtual public ::IceProxy::Ice::Object
{
public:

    void addClient(const ::Ice::Identity& ident)
    {
        addClient(ident, 0);
    }
    void addClient(const ::Ice::Identity& ident, const ::Ice::Context& __ctx)
    {
        addClient(ident, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addClient(const ::Ice::Identity& ident, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addClient(ident, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addClient(const ::Ice::Identity& ident, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addClient(ident, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addClient(const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addClient(ident, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addClient(const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addClient(ident, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addClient(const ::Ice::Identity& ident)
    {
        return begin_addClient(ident, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addClient(const ::Ice::Identity& ident, const ::Ice::Context& __ctx)
    {
        return begin_addClient(ident, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addClient(const ::Ice::Identity& ident, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addClient(ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addClient(const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addClient(ident, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addClient(const ::Ice::Identity& ident, const ::Simbice::Callback_SimbiconServer_addClientPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addClient(ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addClient(const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::Simbice::Callback_SimbiconServer_addClientPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addClient(ident, &__ctx, __del, __cookie);
    }

    void end_addClient(const ::Ice::AsyncResultPtr&);
    
private:

    void addClient(const ::Ice::Identity&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addClient(const ::Ice::Identity&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void acceptClientState(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident)
    {
        acceptClientState(oldState, ident, 0);
    }
    void acceptClientState(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident, const ::Ice::Context& __ctx)
    {
        acceptClientState(oldState, ident, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_acceptClientState(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_acceptClientState(oldState, ident, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_acceptClientState(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_acceptClientState(oldState, ident, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_acceptClientState(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_acceptClientState(oldState, ident, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_acceptClientState(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_acceptClientState(oldState, ident, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_acceptClientState(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident)
    {
        return begin_acceptClientState(oldState, ident, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_acceptClientState(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident, const ::Ice::Context& __ctx)
    {
        return begin_acceptClientState(oldState, ident, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_acceptClientState(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_acceptClientState(oldState, ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_acceptClientState(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_acceptClientState(oldState, ident, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_acceptClientState(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident, const ::Simbice::Callback_SimbiconServer_acceptClientStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_acceptClientState(oldState, ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_acceptClientState(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::Simbice::Callback_SimbiconServer_acceptClientStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_acceptClientState(oldState, ident, &__ctx, __del, __cookie);
    }

    void end_acceptClientState(const ::Ice::AsyncResultPtr&);
    
private:

    void acceptClientState(const ::Simbice::AllState&, const ::Ice::Identity&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_acceptClientState(const ::Simbice::AllState&, const ::Ice::Identity&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_secure(bool __secure) const
    {
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_twoway() const
    {
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_oneway() const
    {
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_batchOneway() const
    {
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_datagram() const
    {
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_batchDatagram() const
    {
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_compress(bool __compress) const
    {
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_timeout(int __timeout) const
    {
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Simbice
{

class ClientCallback : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void acceptNewState(const ::Simbice::AllState&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class SimbiconServer : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void addClient(const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void acceptClientState(const ::Simbice::AllState&, const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Simbice
{

class ClientCallback : virtual public ::IceDelegate::Simbice::ClientCallback,
                       virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void acceptNewState(const ::Simbice::AllState&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class SimbiconServer : virtual public ::IceDelegate::Simbice::SimbiconServer,
                       virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void addClient(const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void acceptClientState(const ::Simbice::AllState&, const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Simbice
{

class ClientCallback : virtual public ::IceDelegate::Simbice::ClientCallback,
                       virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void acceptNewState(const ::Simbice::AllState&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class SimbiconServer : virtual public ::IceDelegate::Simbice::SimbiconServer,
                       virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void addClient(const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void acceptClientState(const ::Simbice::AllState&, const ::Ice::Identity&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Simbice
{

class ClientCallback : virtual public ::Ice::Object
{
public:

    typedef ClientCallbackPrx ProxyType;
    typedef ClientCallbackPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void acceptNewState(const ::Simbice::AllState&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___acceptNewState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const ClientCallback& l, const ClientCallback& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ClientCallback& l, const ClientCallback& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class SimbiconServer : virtual public ::Ice::Object
{
public:

    typedef SimbiconServerPrx ProxyType;
    typedef SimbiconServerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void addClient(const ::Ice::Identity&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addClient(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void acceptClientState(const ::Simbice::AllState&, const ::Ice::Identity&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___acceptClientState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const SimbiconServer& l, const SimbiconServer& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const SimbiconServer& l, const SimbiconServer& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Simbice
{

template<class T>
class CallbackNC_ClientCallback_acceptNewState : public Callback_ClientCallback_acceptNewState_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ClientCallback_acceptNewState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ClientCallback_acceptNewStatePtr
newCallback_ClientCallback_acceptNewState(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ClientCallback_acceptNewState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ClientCallback_acceptNewStatePtr
newCallback_ClientCallback_acceptNewState(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ClientCallback_acceptNewState<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ClientCallback_acceptNewStatePtr
newCallback_ClientCallback_acceptNewState(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ClientCallback_acceptNewState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ClientCallback_acceptNewStatePtr
newCallback_ClientCallback_acceptNewState(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ClientCallback_acceptNewState<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ClientCallback_acceptNewState : public Callback_ClientCallback_acceptNewState_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ClientCallback_acceptNewState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ClientCallback_acceptNewStatePtr
newCallback_ClientCallback_acceptNewState(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ClientCallback_acceptNewState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ClientCallback_acceptNewStatePtr
newCallback_ClientCallback_acceptNewState(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ClientCallback_acceptNewState<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ClientCallback_acceptNewStatePtr
newCallback_ClientCallback_acceptNewState(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ClientCallback_acceptNewState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ClientCallback_acceptNewStatePtr
newCallback_ClientCallback_acceptNewState(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ClientCallback_acceptNewState<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SimbiconServer_addClient : public Callback_SimbiconServer_addClient_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SimbiconServer_addClient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SimbiconServer_addClientPtr
newCallback_SimbiconServer_addClient(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimbiconServer_addClient<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SimbiconServer_addClientPtr
newCallback_SimbiconServer_addClient(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimbiconServer_addClient<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SimbiconServer_addClientPtr
newCallback_SimbiconServer_addClient(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimbiconServer_addClient<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SimbiconServer_addClientPtr
newCallback_SimbiconServer_addClient(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimbiconServer_addClient<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SimbiconServer_addClient : public Callback_SimbiconServer_addClient_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SimbiconServer_addClient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SimbiconServer_addClientPtr
newCallback_SimbiconServer_addClient(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimbiconServer_addClient<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SimbiconServer_addClientPtr
newCallback_SimbiconServer_addClient(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimbiconServer_addClient<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SimbiconServer_addClientPtr
newCallback_SimbiconServer_addClient(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimbiconServer_addClient<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SimbiconServer_addClientPtr
newCallback_SimbiconServer_addClient(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimbiconServer_addClient<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SimbiconServer_acceptClientState : public Callback_SimbiconServer_acceptClientState_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SimbiconServer_acceptClientState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SimbiconServer_acceptClientStatePtr
newCallback_SimbiconServer_acceptClientState(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimbiconServer_acceptClientState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SimbiconServer_acceptClientStatePtr
newCallback_SimbiconServer_acceptClientState(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimbiconServer_acceptClientState<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SimbiconServer_acceptClientStatePtr
newCallback_SimbiconServer_acceptClientState(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimbiconServer_acceptClientState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SimbiconServer_acceptClientStatePtr
newCallback_SimbiconServer_acceptClientState(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimbiconServer_acceptClientState<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SimbiconServer_acceptClientState : public Callback_SimbiconServer_acceptClientState_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SimbiconServer_acceptClientState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SimbiconServer_acceptClientStatePtr
newCallback_SimbiconServer_acceptClientState(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimbiconServer_acceptClientState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SimbiconServer_acceptClientStatePtr
newCallback_SimbiconServer_acceptClientState(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimbiconServer_acceptClientState<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SimbiconServer_acceptClientStatePtr
newCallback_SimbiconServer_acceptClientState(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimbiconServer_acceptClientState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SimbiconServer_acceptClientStatePtr
newCallback_SimbiconServer_acceptClientState(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimbiconServer_acceptClientState<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
