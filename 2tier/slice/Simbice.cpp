// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Simbice.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Simbice.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

static const ::std::string __Simbice__ClientCallback__acceptNewState_name = "acceptNewState";

static const ::std::string __Simbice__SimbiconServer__addClient_name = "addClient";

static const ::std::string __Simbice__SimbiconServer__acceptClientState_name = "acceptClientState";

::Ice::Object* IceInternal::upCast(::Simbice::ClientCallback* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::Simbice::ClientCallback* p) { return p; }

::Ice::Object* IceInternal::upCast(::Simbice::SimbiconServer* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::Simbice::SimbiconServer* p) { return p; }

void
Simbice::__read(::IceInternal::BasicStream* __is, ::Simbice::ClientCallbackPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Simbice::ClientCallback;
        v->__copyFrom(proxy);
    }
}

void
Simbice::__read(::IceInternal::BasicStream* __is, ::Simbice::SimbiconServerPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Simbice::SimbiconServer;
        v->__copyFrom(proxy);
    }
}

void
Simbice::ThreeTuple::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(x);
    __os->write(y);
    __os->write(z);
}

void
Simbice::ThreeTuple::__read(::IceInternal::BasicStream* __is)
{
    __is->read(x);
    __is->read(y);
    __is->read(z);
}

void
Simbice::Quaternion::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(s);
    v.__write(__os);
}

void
Simbice::Quaternion::__read(::IceInternal::BasicStream* __is)
{
    __is->read(s);
    v.__read(__is);
}

void
Simbice::RBState::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(id);
    position.__write(__os);
    orientation.__write(__os);
    velocity.__write(__os);
    angularVelocity.__write(__os);
}

void
Simbice::RBState::__read(::IceInternal::BasicStream* __is)
{
    __is->read(id);
    position.__read(__is);
    orientation.__read(__is);
    velocity.__read(__is);
    angularVelocity.__read(__is);
}

void
Simbice::JointState::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(id);
    torque.__write(__os);
}

void
Simbice::JointState::__read(::IceInternal::BasicStream* __is)
{
    __is->read(id);
    torque.__read(__is);
}

void
Simbice::ContactPoint::__write(::IceInternal::BasicStream* __os) const
{
    cp.__write(__os);
    n.__write(__os);
    __os->write(d);
    __os->write(rb1);
    __os->write(rb2);
    f.__write(__os);
}

void
Simbice::ContactPoint::__read(::IceInternal::BasicStream* __is)
{
    cp.__read(__is);
    n.__read(__is);
    __is->read(d);
    __is->read(rb1);
    __is->read(rb2);
    f.__read(__is);
}

void
Simbice::__writeBodyStatesList(::IceInternal::BasicStream* __os, const ::Simbice::RBState* begin, const ::Simbice::RBState* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        begin[i].__write(__os);
    }
}

void
Simbice::__readBodyStatesList(::IceInternal::BasicStream* __is, ::Simbice::BodyStatesList& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(108, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        v[i].__read(__is);
    }
}

void
Simbice::__writeJointStatesList(::IceInternal::BasicStream* __os, const ::Simbice::JointState* begin, const ::Simbice::JointState* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        begin[i].__write(__os);
    }
}

void
Simbice::__readJointStatesList(::IceInternal::BasicStream* __is, ::Simbice::JointStatesList& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(28, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        v[i].__read(__is);
    }
}

void
Simbice::__writeContactPointsList(::IceInternal::BasicStream* __os, const ::Simbice::ContactPoint* begin, const ::Simbice::ContactPoint* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        begin[i].__write(__os);
    }
}

void
Simbice::__readContactPointsList(::IceInternal::BasicStream* __is, ::Simbice::ContactPointsList& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(88, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        v[i].__read(__is);
    }
}

void
Simbice::AllState::__write(::IceInternal::BasicStream* __os) const
{
    if(bodyStates.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        ::Simbice::__writeBodyStatesList(__os, &bodyStates[0], &bodyStates[0] + bodyStates.size());
    }
    if(jointStates.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        ::Simbice::__writeJointStatesList(__os, &jointStates[0], &jointStates[0] + jointStates.size());
    }
    if(contactPoints.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        ::Simbice::__writeContactPointsList(__os, &contactPoints[0], &contactPoints[0] + contactPoints.size());
    }
    __os->write(absoluteTime);
}

void
Simbice::AllState::__read(::IceInternal::BasicStream* __is)
{
    ::Simbice::__readBodyStatesList(__is, bodyStates);
    ::Simbice::__readJointStatesList(__is, jointStates);
    ::Simbice::__readContactPointsList(__is, contactPoints);
    __is->read(absoluteTime);
}

void
IceProxy::Simbice::ClientCallback::acceptNewState(const ::Simbice::AllState& newState, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Simbice::ClientCallback* __del = dynamic_cast< ::IceDelegate::Simbice::ClientCallback*>(__delBase.get());
            __del->acceptNewState(newState, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Simbice::ClientCallback::begin_acceptNewState(const ::Simbice::AllState& newState, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Simbice__ClientCallback__acceptNewState_name, __del, __cookie);
    try
    {
        __result->__prepare(__Simbice__ClientCallback__acceptNewState_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        newState.__write(__os);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Simbice::ClientCallback::end_acceptNewState(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Simbice__ClientCallback__acceptNewState_name);
}

const ::std::string&
IceProxy::Simbice::ClientCallback::ice_staticId()
{
    return ::Simbice::ClientCallback::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Simbice::ClientCallback::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Simbice::ClientCallback);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Simbice::ClientCallback::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Simbice::ClientCallback);
}

::IceProxy::Ice::Object*
IceProxy::Simbice::ClientCallback::__newInstance() const
{
    return new ClientCallback;
}

void
IceProxy::Simbice::SimbiconServer::addClient(const ::Ice::Identity& ident, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Simbice::SimbiconServer* __del = dynamic_cast< ::IceDelegate::Simbice::SimbiconServer*>(__delBase.get());
            __del->addClient(ident, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Simbice::SimbiconServer::begin_addClient(const ::Ice::Identity& ident, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Simbice__SimbiconServer__addClient_name, __del, __cookie);
    try
    {
        __result->__prepare(__Simbice__SimbiconServer__addClient_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        ident.__write(__os);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Simbice::SimbiconServer::end_addClient(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Simbice__SimbiconServer__addClient_name);
}

void
IceProxy::Simbice::SimbiconServer::acceptClientState(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Simbice::SimbiconServer* __del = dynamic_cast< ::IceDelegate::Simbice::SimbiconServer*>(__delBase.get());
            __del->acceptClientState(oldState, ident, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Simbice::SimbiconServer::begin_acceptClientState(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Simbice__SimbiconServer__acceptClientState_name, __del, __cookie);
    try
    {
        __result->__prepare(__Simbice__SimbiconServer__acceptClientState_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        oldState.__write(__os);
        ident.__write(__os);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Simbice::SimbiconServer::end_acceptClientState(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Simbice__SimbiconServer__acceptClientState_name);
}

const ::std::string&
IceProxy::Simbice::SimbiconServer::ice_staticId()
{
    return ::Simbice::SimbiconServer::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Simbice::SimbiconServer::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Simbice::SimbiconServer);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Simbice::SimbiconServer::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Simbice::SimbiconServer);
}

::IceProxy::Ice::Object*
IceProxy::Simbice::SimbiconServer::__newInstance() const
{
    return new SimbiconServer;
}

void
IceDelegateM::Simbice::ClientCallback::acceptNewState(const ::Simbice::AllState& newState, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Simbice__ClientCallback__acceptNewState_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        newState.__write(__os);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Simbice::SimbiconServer::addClient(const ::Ice::Identity& ident, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Simbice__SimbiconServer__addClient_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        ident.__write(__os);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Simbice::SimbiconServer::acceptClientState(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Simbice__SimbiconServer__acceptClientState_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        oldState.__write(__os);
        ident.__write(__os);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateD::Simbice::ClientCallback::acceptNewState(const ::Simbice::AllState& newState, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Simbice::AllState& newState, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_newState(newState)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Simbice::ClientCallback* servant = dynamic_cast< ::Simbice::ClientCallback*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->acceptNewState(_m_newState, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::Simbice::AllState& _m_newState;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Simbice__ClientCallback__acceptNewState_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(newState, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Simbice::SimbiconServer::addClient(const ::Ice::Identity& ident, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Identity& ident, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_ident(ident)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Simbice::SimbiconServer* servant = dynamic_cast< ::Simbice::SimbiconServer*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->addClient(_m_ident, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::Ice::Identity& _m_ident;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Simbice__SimbiconServer__addClient_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(ident, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Simbice::SimbiconServer::acceptClientState(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_oldState(oldState),
            _m_ident(ident)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Simbice::SimbiconServer* servant = dynamic_cast< ::Simbice::SimbiconServer*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->acceptClientState(_m_oldState, _m_ident, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::Simbice::AllState& _m_oldState;
        const ::Ice::Identity& _m_ident;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Simbice__SimbiconServer__acceptClientState_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(oldState, ident, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::ObjectPtr
Simbice::ClientCallback::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __Simbice__ClientCallback_ids[2] =
{
    "::Ice::Object",
    "::Simbice::ClientCallback"
};

bool
Simbice::ClientCallback::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Simbice__ClientCallback_ids, __Simbice__ClientCallback_ids + 2, _s);
}

::std::vector< ::std::string>
Simbice::ClientCallback::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Simbice__ClientCallback_ids[0], &__Simbice__ClientCallback_ids[2]);
}

const ::std::string&
Simbice::ClientCallback::ice_id(const ::Ice::Current&) const
{
    return __Simbice__ClientCallback_ids[1];
}

const ::std::string&
Simbice::ClientCallback::ice_staticId()
{
    return __Simbice__ClientCallback_ids[1];
}

::Ice::DispatchStatus
Simbice::ClientCallback::___acceptNewState(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Simbice::AllState newState;
    newState.__read(__is);
    __is->endReadEncaps();
    acceptNewState(newState, __current);
    return ::Ice::DispatchOK;
}

static ::std::string __Simbice__ClientCallback_all[] =
{
    "acceptNewState",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

::Ice::DispatchStatus
Simbice::ClientCallback::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__Simbice__ClientCallback_all, __Simbice__ClientCallback_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Simbice__ClientCallback_all)
    {
        case 0:
        {
            return ___acceptNewState(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Simbice::ClientCallback::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
Simbice::ClientCallback::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
Simbice::ClientCallback::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Simbice::ClientCallback was not generated with stream support";
    throw ex;
}

void
Simbice::ClientCallback::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Simbice::ClientCallback was not generated with stream support";
    throw ex;
}
#endif

void 
Simbice::__patch__ClientCallbackPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::Simbice::ClientCallbackPtr* p = static_cast< ::Simbice::ClientCallbackPtr*>(__addr);
    assert(p);
    *p = ::Simbice::ClientCallbackPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::Simbice::ClientCallback::ice_staticId(), v->ice_id());
    }
}

::Ice::ObjectPtr
Simbice::SimbiconServer::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __Simbice__SimbiconServer_ids[2] =
{
    "::Ice::Object",
    "::Simbice::SimbiconServer"
};

bool
Simbice::SimbiconServer::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Simbice__SimbiconServer_ids, __Simbice__SimbiconServer_ids + 2, _s);
}

::std::vector< ::std::string>
Simbice::SimbiconServer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Simbice__SimbiconServer_ids[0], &__Simbice__SimbiconServer_ids[2]);
}

const ::std::string&
Simbice::SimbiconServer::ice_id(const ::Ice::Current&) const
{
    return __Simbice__SimbiconServer_ids[1];
}

const ::std::string&
Simbice::SimbiconServer::ice_staticId()
{
    return __Simbice__SimbiconServer_ids[1];
}

::Ice::DispatchStatus
Simbice::SimbiconServer::___addClient(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Identity ident;
    ident.__read(__is);
    __is->endReadEncaps();
    addClient(ident, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Simbice::SimbiconServer::___acceptClientState(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Simbice::AllState oldState;
    ::Ice::Identity ident;
    oldState.__read(__is);
    ident.__read(__is);
    __is->endReadEncaps();
    acceptClientState(oldState, ident, __current);
    return ::Ice::DispatchOK;
}

static ::std::string __Simbice__SimbiconServer_all[] =
{
    "acceptClientState",
    "addClient",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

::Ice::DispatchStatus
Simbice::SimbiconServer::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__Simbice__SimbiconServer_all, __Simbice__SimbiconServer_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Simbice__SimbiconServer_all)
    {
        case 0:
        {
            return ___acceptClientState(in, current);
        }
        case 1:
        {
            return ___addClient(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Simbice::SimbiconServer::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
Simbice::SimbiconServer::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
Simbice::SimbiconServer::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Simbice::SimbiconServer was not generated with stream support";
    throw ex;
}

void
Simbice::SimbiconServer::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Simbice::SimbiconServer was not generated with stream support";
    throw ex;
}
#endif

void 
Simbice::__patch__SimbiconServerPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::Simbice::SimbiconServerPtr* p = static_cast< ::Simbice::SimbiconServerPtr*>(__addr);
    assert(p);
    *p = ::Simbice::SimbiconServerPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::Simbice::SimbiconServer::ice_staticId(), v->ice_id());
    }
}
