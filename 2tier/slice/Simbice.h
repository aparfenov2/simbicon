// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Simbice.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Simbice_h__
#define __Simbice_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/Identity.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Simbice
{

class ClientCallback;

class SimbiconServer;

}

}

namespace Simbice
{

class ClientCallback;
bool operator==(const ClientCallback&, const ClientCallback&);
bool operator<(const ClientCallback&, const ClientCallback&);

class SimbiconServer;
bool operator==(const SimbiconServer&, const SimbiconServer&);
bool operator<(const SimbiconServer&, const SimbiconServer&);

}

namespace IceInternal
{

::Ice::Object* upCast(::Simbice::ClientCallback*);
::IceProxy::Ice::Object* upCast(::IceProxy::Simbice::ClientCallback*);

::Ice::Object* upCast(::Simbice::SimbiconServer*);
::IceProxy::Ice::Object* upCast(::IceProxy::Simbice::SimbiconServer*);

}

namespace Simbice
{

typedef ::IceInternal::Handle< ::Simbice::ClientCallback> ClientCallbackPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Simbice::ClientCallback> ClientCallbackPrx;

void __read(::IceInternal::BasicStream*, ClientCallbackPrx&);
void __patch__ClientCallbackPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::Simbice::SimbiconServer> SimbiconServerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Simbice::SimbiconServer> SimbiconServerPrx;

void __read(::IceInternal::BasicStream*, SimbiconServerPrx&);
void __patch__SimbiconServerPtr(void*, ::Ice::ObjectPtr&);

}

namespace Simbice
{

struct ThreeTuple
{
    ::Ice::Double x;
    ::Ice::Double y;
    ::Ice::Double z;

    bool operator==(const ThreeTuple& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(x != __rhs.x)
        {
            return false;
        }
        if(y != __rhs.y)
        {
            return false;
        }
        if(z != __rhs.z)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ThreeTuple& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(x < __rhs.x)
        {
            return true;
        }
        else if(__rhs.x < x)
        {
            return false;
        }
        if(y < __rhs.y)
        {
            return true;
        }
        else if(__rhs.y < y)
        {
            return false;
        }
        if(z < __rhs.z)
        {
            return true;
        }
        else if(__rhs.z < z)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ThreeTuple& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ThreeTuple& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ThreeTuple& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ThreeTuple& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct Quaternion
{
    ::Ice::Double s;
    ::Simbice::ThreeTuple v;

    bool operator==(const Quaternion& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(s != __rhs.s)
        {
            return false;
        }
        if(v != __rhs.v)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Quaternion& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(s < __rhs.s)
        {
            return true;
        }
        else if(__rhs.s < s)
        {
            return false;
        }
        if(v < __rhs.v)
        {
            return true;
        }
        else if(__rhs.v < v)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Quaternion& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const Quaternion& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const Quaternion& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const Quaternion& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct RBState
{
    ::Ice::Int id;
    ::Simbice::ThreeTuple position;
    ::Simbice::Quaternion orientation;
    ::Simbice::ThreeTuple velocity;
    ::Simbice::ThreeTuple angularVelocity;

    bool operator==(const RBState& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        if(position != __rhs.position)
        {
            return false;
        }
        if(orientation != __rhs.orientation)
        {
            return false;
        }
        if(velocity != __rhs.velocity)
        {
            return false;
        }
        if(angularVelocity != __rhs.angularVelocity)
        {
            return false;
        }
        return true;
    }

    bool operator<(const RBState& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        if(position < __rhs.position)
        {
            return true;
        }
        else if(__rhs.position < position)
        {
            return false;
        }
        if(orientation < __rhs.orientation)
        {
            return true;
        }
        else if(__rhs.orientation < orientation)
        {
            return false;
        }
        if(velocity < __rhs.velocity)
        {
            return true;
        }
        else if(__rhs.velocity < velocity)
        {
            return false;
        }
        if(angularVelocity < __rhs.angularVelocity)
        {
            return true;
        }
        else if(__rhs.angularVelocity < angularVelocity)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const RBState& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const RBState& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const RBState& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const RBState& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct JointState
{
    ::Ice::Int id;
    ::Simbice::ThreeTuple torque;

    bool operator==(const JointState& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        if(torque != __rhs.torque)
        {
            return false;
        }
        return true;
    }

    bool operator<(const JointState& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        if(torque < __rhs.torque)
        {
            return true;
        }
        else if(__rhs.torque < torque)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const JointState& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const JointState& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const JointState& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const JointState& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct ContactPoint
{
    ::Simbice::ThreeTuple cp;
    ::Simbice::ThreeTuple n;
    ::Ice::Double d;
    ::Ice::Int rb1;
    ::Ice::Int rb2;
    ::Simbice::ThreeTuple f;

    bool operator==(const ContactPoint& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(cp != __rhs.cp)
        {
            return false;
        }
        if(n != __rhs.n)
        {
            return false;
        }
        if(d != __rhs.d)
        {
            return false;
        }
        if(rb1 != __rhs.rb1)
        {
            return false;
        }
        if(rb2 != __rhs.rb2)
        {
            return false;
        }
        if(f != __rhs.f)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ContactPoint& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(cp < __rhs.cp)
        {
            return true;
        }
        else if(__rhs.cp < cp)
        {
            return false;
        }
        if(n < __rhs.n)
        {
            return true;
        }
        else if(__rhs.n < n)
        {
            return false;
        }
        if(d < __rhs.d)
        {
            return true;
        }
        else if(__rhs.d < d)
        {
            return false;
        }
        if(rb1 < __rhs.rb1)
        {
            return true;
        }
        else if(__rhs.rb1 < rb1)
        {
            return false;
        }
        if(rb2 < __rhs.rb2)
        {
            return true;
        }
        else if(__rhs.rb2 < rb2)
        {
            return false;
        }
        if(f < __rhs.f)
        {
            return true;
        }
        else if(__rhs.f < f)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ContactPoint& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ContactPoint& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ContactPoint& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ContactPoint& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::Simbice::RBState> BodyStatesList;
void __writeBodyStatesList(::IceInternal::BasicStream*, const ::Simbice::RBState*, const ::Simbice::RBState*);
void __readBodyStatesList(::IceInternal::BasicStream*, BodyStatesList&);

typedef ::std::vector< ::Simbice::JointState> JointStatesList;
void __writeJointStatesList(::IceInternal::BasicStream*, const ::Simbice::JointState*, const ::Simbice::JointState*);
void __readJointStatesList(::IceInternal::BasicStream*, JointStatesList&);

typedef ::std::vector< ::Simbice::ContactPoint> ContactPointsList;
void __writeContactPointsList(::IceInternal::BasicStream*, const ::Simbice::ContactPoint*, const ::Simbice::ContactPoint*);
void __readContactPointsList(::IceInternal::BasicStream*, ContactPointsList&);

struct AllState
{
    ::Simbice::BodyStatesList bodyStates;
    ::Simbice::JointStatesList jointStates;
    ::Simbice::ContactPointsList contactPoints;
    ::Ice::Double absoluteTime;

    bool operator==(const AllState& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(bodyStates != __rhs.bodyStates)
        {
            return false;
        }
        if(jointStates != __rhs.jointStates)
        {
            return false;
        }
        if(contactPoints != __rhs.contactPoints)
        {
            return false;
        }
        if(absoluteTime != __rhs.absoluteTime)
        {
            return false;
        }
        return true;
    }

    bool operator<(const AllState& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(bodyStates < __rhs.bodyStates)
        {
            return true;
        }
        else if(__rhs.bodyStates < bodyStates)
        {
            return false;
        }
        if(jointStates < __rhs.jointStates)
        {
            return true;
        }
        else if(__rhs.jointStates < jointStates)
        {
            return false;
        }
        if(contactPoints < __rhs.contactPoints)
        {
            return true;
        }
        else if(__rhs.contactPoints < contactPoints)
        {
            return false;
        }
        if(absoluteTime < __rhs.absoluteTime)
        {
            return true;
        }
        else if(__rhs.absoluteTime < absoluteTime)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const AllState& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const AllState& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const AllState& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const AllState& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

}

namespace Simbice
{

class Callback_ClientCallback_acceptNewState_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ClientCallback_acceptNewState_Base> Callback_ClientCallback_acceptNewStatePtr;

class Callback_SimbiconServer_addClient_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SimbiconServer_addClient_Base> Callback_SimbiconServer_addClientPtr;

class Callback_SimbiconServer_acceptClientState_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SimbiconServer_acceptClientState_Base> Callback_SimbiconServer_acceptClientStatePtr;

}

namespace IceProxy
{

namespace Simbice
{

class ClientCallback : virtual public ::IceProxy::Ice::Object
{
public:

    void acceptNewState(const ::Simbice::AllState& newState)
    {
        acceptNewState(newState, 0);
    }
    void acceptNewState(const ::Simbice::AllState& newState, const ::Ice::Context& __ctx)
    {
        acceptNewState(newState, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_acceptNewState(const ::Simbice::AllState& newState)
    {
        return begin_acceptNewState(newState, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_acceptNewState(const ::Simbice::AllState& newState, const ::Ice::Context& __ctx)
    {
        return begin_acceptNewState(newState, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_acceptNewState(const ::Simbice::AllState& newState, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_acceptNewState(newState, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_acceptNewState(const ::Simbice::AllState& newState, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_acceptNewState(newState, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_acceptNewState(const ::Simbice::AllState& newState, const ::Simbice::Callback_ClientCallback_acceptNewStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_acceptNewState(newState, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_acceptNewState(const ::Simbice::AllState& newState, const ::Ice::Context& __ctx, const ::Simbice::Callback_ClientCallback_acceptNewStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_acceptNewState(newState, &__ctx, __del, __cookie);
    }

    void end_acceptNewState(const ::Ice::AsyncResultPtr&);
    
private:

    void acceptNewState(const ::Simbice::AllState&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_acceptNewState(const ::Simbice::AllState&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClientCallback*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClientCallback*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClientCallback*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClientCallback*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClientCallback*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClientCallback*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClientCallback*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClientCallback*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClientCallback*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClientCallback*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClientCallback*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClientCallback*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClientCallback*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClientCallback*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClientCallback*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClientCallback*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClientCallback*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClientCallback*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<ClientCallback> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<ClientCallback*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<ClientCallback*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class SimbiconServer : virtual public ::IceProxy::Ice::Object
{
public:

    void addClient(const ::Ice::Identity& ident)
    {
        addClient(ident, 0);
    }
    void addClient(const ::Ice::Identity& ident, const ::Ice::Context& __ctx)
    {
        addClient(ident, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addClient(const ::Ice::Identity& ident)
    {
        return begin_addClient(ident, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addClient(const ::Ice::Identity& ident, const ::Ice::Context& __ctx)
    {
        return begin_addClient(ident, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addClient(const ::Ice::Identity& ident, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addClient(ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addClient(const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addClient(ident, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addClient(const ::Ice::Identity& ident, const ::Simbice::Callback_SimbiconServer_addClientPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addClient(ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addClient(const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::Simbice::Callback_SimbiconServer_addClientPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addClient(ident, &__ctx, __del, __cookie);
    }

    void end_addClient(const ::Ice::AsyncResultPtr&);
    
private:

    void addClient(const ::Ice::Identity&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addClient(const ::Ice::Identity&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void acceptClientState(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident)
    {
        acceptClientState(oldState, ident, 0);
    }
    void acceptClientState(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident, const ::Ice::Context& __ctx)
    {
        acceptClientState(oldState, ident, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_acceptClientState(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident)
    {
        return begin_acceptClientState(oldState, ident, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_acceptClientState(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident, const ::Ice::Context& __ctx)
    {
        return begin_acceptClientState(oldState, ident, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_acceptClientState(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_acceptClientState(oldState, ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_acceptClientState(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_acceptClientState(oldState, ident, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_acceptClientState(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident, const ::Simbice::Callback_SimbiconServer_acceptClientStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_acceptClientState(oldState, ident, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_acceptClientState(const ::Simbice::AllState& oldState, const ::Ice::Identity& ident, const ::Ice::Context& __ctx, const ::Simbice::Callback_SimbiconServer_acceptClientStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_acceptClientState(oldState, ident, &__ctx, __del, __cookie);
    }

    void end_acceptClientState(const ::Ice::AsyncResultPtr&);
    
private:

    void acceptClientState(const ::Simbice::AllState&, const ::Ice::Identity&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_acceptClientState(const ::Simbice::AllState&, const ::Ice::Identity&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SimbiconServer*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SimbiconServer*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SimbiconServer*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SimbiconServer*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SimbiconServer*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SimbiconServer*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SimbiconServer*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SimbiconServer*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SimbiconServer*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SimbiconServer*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SimbiconServer*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SimbiconServer*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SimbiconServer*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SimbiconServer*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SimbiconServer*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SimbiconServer*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SimbiconServer*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SimbiconServer*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SimbiconServer> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SimbiconServer*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<SimbiconServer*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Simbice
{

class ClientCallback : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void acceptNewState(const ::Simbice::AllState&, const ::Ice::Context*) = 0;
};

class SimbiconServer : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void addClient(const ::Ice::Identity&, const ::Ice::Context*) = 0;

    virtual void acceptClientState(const ::Simbice::AllState&, const ::Ice::Identity&, const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace Simbice
{

class ClientCallback : virtual public ::IceDelegate::Simbice::ClientCallback,
                       virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void acceptNewState(const ::Simbice::AllState&, const ::Ice::Context*);
};

class SimbiconServer : virtual public ::IceDelegate::Simbice::SimbiconServer,
                       virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void addClient(const ::Ice::Identity&, const ::Ice::Context*);

    virtual void acceptClientState(const ::Simbice::AllState&, const ::Ice::Identity&, const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace Simbice
{

class ClientCallback : virtual public ::IceDelegate::Simbice::ClientCallback,
                       virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void acceptNewState(const ::Simbice::AllState&, const ::Ice::Context*);
};

class SimbiconServer : virtual public ::IceDelegate::Simbice::SimbiconServer,
                       virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void addClient(const ::Ice::Identity&, const ::Ice::Context*);

    virtual void acceptClientState(const ::Simbice::AllState&, const ::Ice::Identity&, const ::Ice::Context*);
};

}

}

namespace Simbice
{

class ClientCallback : virtual public ::Ice::Object
{
public:

    typedef ClientCallbackPrx ProxyType;
    typedef ClientCallbackPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void acceptNewState(const ::Simbice::AllState&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___acceptNewState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const ClientCallback& l, const ClientCallback& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ClientCallback& l, const ClientCallback& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class SimbiconServer : virtual public ::Ice::Object
{
public:

    typedef SimbiconServerPrx ProxyType;
    typedef SimbiconServerPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void addClient(const ::Ice::Identity&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addClient(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void acceptClientState(const ::Simbice::AllState&, const ::Ice::Identity&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___acceptClientState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const SimbiconServer& l, const SimbiconServer& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const SimbiconServer& l, const SimbiconServer& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Simbice
{

template<class T>
class CallbackNC_ClientCallback_acceptNewState : public Callback_ClientCallback_acceptNewState_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ClientCallback_acceptNewState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ClientCallback_acceptNewStatePtr
newCallback_ClientCallback_acceptNewState(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ClientCallback_acceptNewState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ClientCallback_acceptNewStatePtr
newCallback_ClientCallback_acceptNewState(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ClientCallback_acceptNewState<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ClientCallback_acceptNewStatePtr
newCallback_ClientCallback_acceptNewState(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ClientCallback_acceptNewState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ClientCallback_acceptNewStatePtr
newCallback_ClientCallback_acceptNewState(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ClientCallback_acceptNewState<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ClientCallback_acceptNewState : public Callback_ClientCallback_acceptNewState_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ClientCallback_acceptNewState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ClientCallback_acceptNewStatePtr
newCallback_ClientCallback_acceptNewState(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ClientCallback_acceptNewState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ClientCallback_acceptNewStatePtr
newCallback_ClientCallback_acceptNewState(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ClientCallback_acceptNewState<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ClientCallback_acceptNewStatePtr
newCallback_ClientCallback_acceptNewState(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ClientCallback_acceptNewState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ClientCallback_acceptNewStatePtr
newCallback_ClientCallback_acceptNewState(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ClientCallback_acceptNewState<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SimbiconServer_addClient : public Callback_SimbiconServer_addClient_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SimbiconServer_addClient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SimbiconServer_addClientPtr
newCallback_SimbiconServer_addClient(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimbiconServer_addClient<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SimbiconServer_addClientPtr
newCallback_SimbiconServer_addClient(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimbiconServer_addClient<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SimbiconServer_addClientPtr
newCallback_SimbiconServer_addClient(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimbiconServer_addClient<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SimbiconServer_addClientPtr
newCallback_SimbiconServer_addClient(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimbiconServer_addClient<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SimbiconServer_addClient : public Callback_SimbiconServer_addClient_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SimbiconServer_addClient(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SimbiconServer_addClientPtr
newCallback_SimbiconServer_addClient(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimbiconServer_addClient<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SimbiconServer_addClientPtr
newCallback_SimbiconServer_addClient(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimbiconServer_addClient<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SimbiconServer_addClientPtr
newCallback_SimbiconServer_addClient(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimbiconServer_addClient<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SimbiconServer_addClientPtr
newCallback_SimbiconServer_addClient(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimbiconServer_addClient<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SimbiconServer_acceptClientState : public Callback_SimbiconServer_acceptClientState_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SimbiconServer_acceptClientState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SimbiconServer_acceptClientStatePtr
newCallback_SimbiconServer_acceptClientState(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimbiconServer_acceptClientState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SimbiconServer_acceptClientStatePtr
newCallback_SimbiconServer_acceptClientState(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimbiconServer_acceptClientState<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SimbiconServer_acceptClientStatePtr
newCallback_SimbiconServer_acceptClientState(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimbiconServer_acceptClientState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SimbiconServer_acceptClientStatePtr
newCallback_SimbiconServer_acceptClientState(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SimbiconServer_acceptClientState<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SimbiconServer_acceptClientState : public Callback_SimbiconServer_acceptClientState_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SimbiconServer_acceptClientState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SimbiconServer_acceptClientStatePtr
newCallback_SimbiconServer_acceptClientState(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimbiconServer_acceptClientState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SimbiconServer_acceptClientStatePtr
newCallback_SimbiconServer_acceptClientState(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimbiconServer_acceptClientState<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SimbiconServer_acceptClientStatePtr
newCallback_SimbiconServer_acceptClientState(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimbiconServer_acceptClientState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SimbiconServer_acceptClientStatePtr
newCallback_SimbiconServer_acceptClientState(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SimbiconServer_acceptClientState<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
